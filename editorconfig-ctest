#!/bin/python3

import os
import sys
import logging
import re
import argparse

from editorconfig import get_properties, exceptions


# default values:

default_tab_width = 4


default_ignores = [
    # regex syntax after workdir path
    r'/.git/.*$',
    r'/builddir/.*$',
]


default_ignore_files = [
    # inside workdir only for now
    '.editorconfigignore',
    '.localeditorconfigignore',
]


# helper functions:

def get_ignored_files(workdir):
    # regex style outputs
    out = []
    for ignore in default_ignores:
        out += [workdir + ignore]
    for filename in default_ignore_files:
        try:
            f = open(os.path.join(workdir, filename), mode='r')
            for line in f:
                if len(line) > 0:
                    if line[0] != '#':
                        line = re.sub(r'(\n|\r|\r\n)$', '', line)  # strips eol char
                        out += [workdir + line]
            f.close()
        except IOError:
            pass
    # todo: ignore files in .gitignore
    return out


def should_be_tested(filename, ignores):
    for ignore in ignores:
        if re.match(ignore, filename):
            logging.debug(filename + ': ignored (by ignores)')
            return False
    retval = True
    try:
        f = open(filename, mode='r')
        line = None
        for line in f:
            pass
        if line is None:
            logging.debug(filename + ': ignored (file is empty)')
            retval = False
    except UnicodeDecodeError:
        logging.debug(filename + ': ignored (no text readable)')
        retval = False
    f.close()
    return retval


def options_to_str(options):
    out = '['
    for key, value in options.items():
        out += '(' + key + ': ' + value + '), '
    if out != '[':
        out = out[:-2] + ']'
    return out


def eol_regex_expr(end_of_line):
    if end_of_line == 'lf':
        return r'\n$'
    if end_of_line == 'cr':
        return r'\r$'
    if end_of_line == 'crlf':
        return r'\r\n$'
    return r'(\n|\r|\r\n)?$'


def str_to_bool(string):
    if string == 'true':
        return True
    elif string == 'false':
        return False


# conformance tests:

ctest_fail_counter = None


def ctest_charset(filename, value):
    global ctest_fail_counter
    f = open(filename, mode='r')
    if f.encoding != value.upper():
        ctest_fail_counter += 1
        logging.info(filename + ': unexpected encoding')
    f.close()


def ctest_end_of_line(filename, value):
    global ctest_fail_counter
    regex_expr = r'.*' + eol_regex_expr(value)
    f = open(filename, mode='r')
    line_count = 0
    for line in f:
        line_count += 1
        if not re.match(regex_expr, line):
            ctest_fail_counter += 1
            logging.info(filename + ': unexpected end of line character in line ' + str(line_count))
    f.close()


def ctest_trim_trailing_whitespace(filename, value):
    global ctest_fail_counter
    if value:
        f = open(filename, mode='r')
        line_count = 0
        for line in f:
            line_count += 1
            if re.match(r'.*\s(\n|\r|\r\n)$', line):  # could be a problem if not insert final newline
                ctest_fail_counter += 1
                logging.info(filename + ': non-trimmed trailing whitespace in line ' + str(line_count))
        f.close()


def ctest_insert_final_newline(filename, value):
    global ctest_fail_counter
    if value:
        f = open(filename, mode='r')
        for line in f:
            pass
        if not re.match(r'.*(\n|\r|\r\n)$', line):
            ctest_fail_counter += 1
            logging.info(filename + ': missing final newline')
        f.close()


def ctest_indent_style(filename, value):
    global ctest_fail_counter
    f = open(filename, mode='r')
    line_count = 0
    if value == 'space':
        for line in f:
            line_count += 1
            if re.match(r'^\t+', line):
                ctest_fail_counter += 1
                logging.info(filename + ': unexpected tab indent in line' + str(line_count))
    elif value == 'tab':
        for line in f:
            line_count += 1
            if re.match(r'^\s{2,}', line):
                # note: allowing one space for comment blocks
                # todo: consider this properly with block_comment (https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties)
                ctest_fail_counter += 1
                logging.info(filename + ': unexpected space indent in line' + str(line_count))
    f.close()


def ctest_indent_size(filename, value, indent_style, tab_width):
    pass  # todo


def ctest_max_line_length(filename, value, tab_width, end_of_line):
    global ctest_fail_counter
    f = open(filename, mode='r')
    line_count = 0
    for line in f:
        line_count += 1
        line = re.sub(r'(\n|\r|\r\n)$', '', line)  # strips eol char
        tab_replace = ''
        for _ in range(tab_width):
            tab_replace += ' '
        line = re.sub(r'^\t+', tab_replace, line)  # replaces tab with tab_width spaces
        if len(line) > value:
            ctest_fail_counter += 1
            logging.info(filename + ': too long line in line ' + str(line_count))
    f.close()


def ctest(filename, ignores):
    if should_be_tested(filename, ignores):
        # get editorconfig options
        options = dict()
        try:
            options = get_properties(filename)
        except exceptions.ParsingError:
            logging.warning(filename + ': error parsing an .editorconfig file', exc_info=True)
        except exceptions.PathError:
            logging.error(filename + ': invalid filename specified', exc_info=True)
        except exceptions.EditorConfigError:
            logging.error(filename + ': unknown EditorConfig error occurred', exc_info=True)
        # run conformance tests
        logging.debug(filename + ': options ' + options_to_str(options))
        if 'charset' in options:
            ctest_charset(filename, options['charset'])
        if 'end_of_line' in options:
            ctest_end_of_line(filename, options['end_of_line'])
        if 'trim_trailing_whitespace' in options:
            ctest_trim_trailing_whitespace(filename, str_to_bool(options['trim_trailing_whitespace']))
        if 'insert_final_newline' in options:
            ctest_insert_final_newline(filename, str_to_bool(options['insert_final_newline']))
        if 'indent_style' in options:
            ctest_indent_style(filename, options['indent_style'])
        if 'indent_size' in options:
            indent_style = None
            if 'indent_style' in options:
                indent_style = options['indent_style']
            tab_width = default_tab_width
            if 'tab_width' in options:
                tab_width = int(options['tab_width'])
            ctest_indent_size(filename, options['indent_size'], indent_style, tab_width)
        if 'max_line_length' in options:
            tab_width = default_tab_width
            if 'tab_width' in options:
                tab_width = int(options['tab_width'])
            end_of_line = None
            if 'end_of_line' in options:
                end_of_line = options['end_of_line']
            ctest_max_line_length(filename, int(options['max_line_length']), tab_width, end_of_line)


# program entry:

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--dir', action='append', help='test directory')
    parser.add_argument('-f', '--file', action='append', help='test file')
    # todo: add option for ignore files
    parser.add_argument('--exit-zero', action='store_true', help='always exit with status code zero')
    parser.add_argument('--verbose', action='store_true', help='show verbose output')
    args = parser.parse_args()

    logging_level = logging.INFO
    if args.verbose:
        logging_level = logging.DEBUG
    logging.basicConfig(level=logging_level)

    dirs = args.dir
    files = args.file

    if files is None:
        files = []
        if dirs is None:
            dirs = [os.getcwd()]
    elif dirs is None:
        dirs = []

    ctest_fail_counter = 0

    for dirname in dirs:
        dirname = os.path.abspath(dirname)
        ignores = get_ignored_files(dirname)
        for (dirpath, dirnames, filenames) in os.walk(dirname):
            for filename in filenames:
                ctest(os.path.join(dirpath, filename), ignores)

    for filename in files:
        filename = os.path.abspath(filename)
        ctest(os.path.abspath(filename), [])

    exit_status = 0
    if ctest_fail_counter > 0 and not args.exit_zero:
        exit_status = 1
    print('found ' + str(ctest_fail_counter) + ' conformance issues')

    sys.exit(exit_status)
